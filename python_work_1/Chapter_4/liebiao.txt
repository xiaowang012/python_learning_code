#列表的切片处理,处理列表中的部分元素。
#例子1
liebiao=["zhang3","li4","wang5","zhao6","hu7"]
print(liebiao[0:3])#输出列表中的第1个到第三个元素，索引分别为0，1，2（代表前三个元素）
print(liebiao[0:4])#输出第1个到第4个元素
print(liebiao[:4])#若没有设置第开头的索引，默认从第一个元素开始
print(liebiao[2:])#若不指定终止的索引，则默认从索引2开始到最后一个元素
print(liebiao[-2:])#使用复数索引可以输出最后几个元素（最后一个元素的索引为-1，倒数第二个为-2，以此类推），本句就是输出倒数最后两个元素

#遍历切片
lb_1=['a','b','c','d','e','f']
for b in lb_1[:3]:#列表为索引0，1，2的元素分别为a，b，c
    print(b.upper())#输出全部大写


#复制列表，思路是使用不设置起始索引和终止索引的的切片（包含整个列表的元素），使用冒号：
a_1=["1","2","3","4"]
b_1=a_1[:]#新列表b_1是原来列表a_1的切片（由于没有设置起始索引和终止索引，所以可以复制整个列表）
print(a_1)#输出原列表a_1
print(b_1)#输出新列表b_1
a_1.append("5")#列表末尾添加元素5
b_1.append("6")#列表末尾添加元素6
print(a_1)
print(b_1)


#元组，是指不可修改的元素集合（可以理解为一个列表，但是它里面的元素不可以修改）
#元组不是用中括号[],使用()
yuanzu=(1,2,3,4,5,6)
print(yuanzu[0])#访问元组中的第一个元素，索引为0
print(yuanzu[1])#访问元组中的第二个元素，索引为1
print("#")
print("#")
#我们可以尝试修改元组中的元素
#yuanzu[0]=22#我们尝试修改元组中的第一个元素1，然后报错了，，所以不能修改
#print(yuanzu) #报错信息为：TypeError: 'tuple' object does not support item assignment

#遍历元组中的所有值
yuanzu_1=(5,6,7,8,9,10)
for yuanzu_2 in yuanzu_1:
    print(yuanzu_2)

#元组的元素虽然不能改变，却可以给储存元组的变量赋值（不改变变量的名称，重新赋值）
yuan_1=("wnagli","zhaosi","zhangxueyou","lidazhao")
for b in yuan_1:
    print(b)

#接下来给变量yuan_1赋值，与上面不同
yuan_1=("001","003","005","007")
for b in yuan_1:
    print(b)

#这样就实现了，给储存元组的变量赋值的效果。元组是一种更简单的数据结构，如果需要储存的值在程序的整个生命周期内都不改变，可以使用元组
