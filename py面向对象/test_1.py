#coding=utf-8
#    python面向对象
#    面向对象技术简介
# 1. 类（class）：用于具有相同的属性或者方法的对象的一个集合，他定义了这个集合中的每一个对象所共有的属性和方法。
#    对象是类的实例
# 2. 方法：类中所定义的函数
# 3. 类变量：类变量在整个实例化的对象中是公用的，类变量定义在类中且在函数体之外，类变量通常不作为实例变量使用。
# 4. 数据成员：类变量或者实例变量中用于处理类，实例的相关数据
# 5. 方法重写：如果从父类继承的方法不满足子类的需求，可以对其进行改写，这个过程叫做方法的覆盖（override）,也称为方法的重写
# 6. 局部变量：定义在方法中的变量，只作用于当前实例的类
# 7. 实例变量：在类的声明中，属性是用变量来表示的，这种变量叫做实例变量，实例变量就是一个用self修饰的变量
# 8. 继承：即一个派生类（derived class） 继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为
#    一个基类对象来对待
# 9. 实例化：创建一个类的实例，类的具体对象
# 10.对象：通过类定义的数据结构实例。对象包含两个数据成员（类变量和实例变量）和方法


#一个简单的类
class MyClass():
    '''注释'''
    i=12345
    def f(self):
        return 'helloworld'

x=MyClass()
#访问这个类MyClass的属性
print(x.i)

#调用这个类的方法f(f为函数)
print(x.f())

#类有一个名为：__init__方法（构造方法），这个方法在实例化操作时会自动调用

class Car():
    
    def a():
        print('a')
    def __init__(self):
        print('22')
         
#访问属性number
#print(Car.number)

#调用方法a
Car.a()

#__init__()自动调用

Car()

#



